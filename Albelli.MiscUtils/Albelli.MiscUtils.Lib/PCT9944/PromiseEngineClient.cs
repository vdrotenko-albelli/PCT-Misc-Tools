//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Centiro.PromiseEngine.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPromiseEngineClient
    {
        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionPointResponse> GetCollectionPointsAsync(string traceparent, CollectionPointRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionPointResponse> GetCollectionPointsAsync(string traceparent, CollectionPointRequest body, System.Threading.CancellationToken cancellationToken);

        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOptionsResponse> GetOptionsAsync(string traceparent, GetOptionsRequest body, string version = "v1");

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOptionsResponse> GetOptionsAsync(string traceparent, GetOptionsRequest body, string version, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromiseEngineClient : IPromiseEngineClient
    {
        private string _baseUrl = "/u20d/api/promise/concept/seven";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PromiseEngineClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CollectionPointResponse> GetCollectionPointsAsync(string traceparent, CollectionPointRequest body)
        {
            return GetCollectionPointsAsync(traceparent, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CollectionPointResponse> GetCollectionPointsAsync(string traceparent, CollectionPointRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/CollectionPoints/GetCollectionPoints");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (traceparent != null)
                        request_.Headers.TryAddWithoutValidation("traceparent", ConvertToString(traceparent, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CollectionPointResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PromiseEngineApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PromiseEngineApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PromiseEngineApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PromiseEngineApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetOptionsResponse> GetOptionsAsync(string traceparent, GetOptionsRequest body, string version = "v1")
        {
            return GetOptionsAsync(traceparent, body, version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="traceparent">Trace id for the journey, example: '00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01'. A unique identifier to each delivery order. For more details see: &lt;a href='https://www.w3.org/TR/trace-context/#traceparent-header'&gt;https://www.w3.org/TR/trace-context/#traceparent-header&lt;/a&gt;</param>
        /// <returns>Success</returns>
        /// <exception cref="PromiseEngineApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetOptionsResponse> GetOptionsAsync(string traceparent, GetOptionsRequest body, string version, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append($"/{version}/Options/GetOptions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (traceparent != null)
                        request_.Headers.TryAddWithoutValidation("traceparent", ConvertToString(traceparent, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOptionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PromiseEngineApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PromiseEngineApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PromiseEngineApiException<ErrorResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PromiseEngineApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PromiseEngineApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PromiseEngineApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PromiseEngineApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PromiseEngineApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("externalDetails", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExternalCarrierErrorDetails ExternalDetails { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalCarrierErrorDetails
    {
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectionPointRequest
    {
        /// <summary>
        /// An id of the carrier network
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// The max distance in km
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxDistance { get; set; }

        /// <summary>
        /// The max amount of collection points
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxCollectionPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxCollectionPoints { get; set; }

        /// <summary>
        /// Location latitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Location longitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

    }

    /// <summary>
    /// Returns collection points for one or many collection point networks based given customer coordinates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectionPointResponse
    {
        /// <summary>
        /// A list of &lt;seealso cref="T:Facade.Promise.Concept.Seven.Implementation.Models.v1.CollectionPoint" /&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollectionPoint> CollectionPoints { get; set; }

        /// <summary>
        /// The url to the map-provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mapsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MapsUrl { get; set; }

    }

    /// <summary>
    /// GetOptionsRequest
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOptionsRequest
    {
        /// <summary>
        /// A unique id for each Get Options request/response. For example used for troubleshooting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid MessageId { get; set; }

        /// <summary>
        /// Deliveries
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<DeliveryRequest> Deliveries { get; set; } = new System.Collections.ObjectModel.Collection<DeliveryRequest>();

    }

    /// <summary>
    /// GetOptionsResponse
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOptionsResponse
    {
        /// <summary>
        /// MessageId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MessageId { get; set; }

        /// <summary>
        /// Deliveries
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryResponse> Deliveries { get; set; }

    }

    /// <summary>
    /// Address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Customer number connected to the AddressType,
        /// <br/>for example the Receiver's or Sender's customer number.
        /// <br/>Not to be confused with carrier account number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalAddressIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalAddressIdentifier { get; set; }

        /// <summary>
        /// Name of city
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// If more the one name/contact exists send the other one in this field.
        /// <br/>For example if a name of a store is provided in the name field and a contact person exists,
        /// <br/>send that persons name in this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactName { get; set; }

        /// <summary>
        /// Contact email address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Country code, two characters. ISO 3166-1 alpha 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isoCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IsoCountry { get; set; }

        /// <summary>
        /// Name of person or company
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Contact phone number, if a phone number exist it should be sent here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// Subdivision code, two characters. ISO 3166-1 alpha 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// The name of the street address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Can also be provided in StreetAddress if the house number not exists as a separate field,
        /// <br/>but preferably used if it exists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetAddressHouseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddressHouseNumber { get; set; }

        /// <summary>
        /// Zip Code of the address. Mandatory if the country uses zipcodes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }

        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressType AddressType { get; set; }

    }

    /// <summary>
    /// AddressType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Receiver")]
        Receiver = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sender")]
        Sender = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pickup")]
        Pickup = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Buyer")]
        Buyer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CollectionPoint")]
        CollectionPoint = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReturnTo")]
        ReturnTo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Broker")]
        Broker = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Exporter")]
        Exporter = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Importer")]
        Importer = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TransportPayer")]
        TransportPayer = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxAndDutiesPayer")]
        TaxAndDutiesPayer = 10,

    }

    /// <summary>
    /// GetOptions Attribute
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attribute
    {
        /// <summary>
        /// May be used in the future. Both Code and Value are required if attributes are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// May be used in the future. Both Code and Value are required if attributes are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// AvailableDeliveryOption
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableDeliveryOption
    {
        /// <summary>
        /// Carrier code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Carrier service code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceCode { get; set; }

        /// <summary>
        /// Priority sequence number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }

        /// <summary>
        /// Additional service codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalServiceCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AdditionalServiceCodes { get; set; }

        /// <summary>
        /// Delivery option states which delivery option tha object referes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// Calculated delivery date for delivery options where it is possible to provide a delivery date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime DeliveryDate { get; set; }

        /// <summary>
        /// The earliest delivery date when a delivery window is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("earliestDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EarliestDeliveryDate { get; set; }

        /// <summary>
        /// The latest delivery date when a delivery window is calculated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LatestDeliveryDate { get; set; }

        /// <summary>
        /// The cutoff time when the shipment need to ready to be shipped to meet a customer promise date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cutOffTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CutOffTime { get; set; }

        [Newtonsoft.Json.JsonProperty("leadTimeCalculationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LeadTimeCalculationType LeadTimeCalculationType { get; set; }

        /// <summary>
        /// The base price of the delivery option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basePrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal BasePrice { get; set; }

        /// <summary>
        /// Currency of the base price.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// An id of the carrier network
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetworkId { get; set; }

        /// <summary>
        /// A way of identifying carrier and service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modeOfTransport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModeOfTransport { get; set; }

        /// <summary>
        /// Name of carrier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Carrier Service Key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierServiceKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierServiceKey { get; set; }

        /// <summary>
        /// Carrier Code Letter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierCodeLetter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierCodeLetter { get; set; }

        /// <summary>
        /// Carrier service type (standard ord express)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carrierServiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierServiceType { get; set; }

        /// <summary>
        /// Says if the shipment price includes vat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentPriceIncludeVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipmentPriceIncludeVat { get; set; }

        /// <summary>
        /// Says if the shipment price includes shipping cost
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shipmentPriceIncludesShippingCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShipmentPriceIncludesShippingCost { get; set; }

        /// <summary>
        /// Import tax ratio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importTaxRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImportTaxRatio { get; set; }

        /// <summary>
        /// width, height and media type for the package label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageLabel { get; set; }

        /// <summary>
        /// Boolean describing whether or not this is a letter box service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLetterBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLetterBox { get; set; }

    }

    /// <summary>
    /// What capabilities that the Collection Point has
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Capabilities
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HandicapAccessCapacity")]
        HandicapAccessCapacity = 1,

    }

    /// <summary>
    /// Model that represents a collection point
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectionPoint
    {
        [Newtonsoft.Json.JsonProperty("geoPoint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoPoint GeoPoint { get; set; }

        /// <summary>
        /// The calculated distance between the consumers coordinates and the collection point coordinates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Distance { get; set; }

        /// <summary>
        /// Unit of distance in Kilometers (km).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distanceUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistanceUnit { get; set; }

        /// <summary>
        /// Name of the collection point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        /// <summary>
        /// Carriers identity of the collection point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Collection point network name/code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Network { get; set; }

        /// <summary>
        /// Execution Identifier of the collection point
        /// <br/>Format: 'ExternalId@Network'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// An identifier that represents the collection point on a static map
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mapIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MapIdentifier { get; set; }

        /// <summary>
        /// Capabilities of the collection point
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Capabilities> Capabilities { get; set; }

        /// <summary>
        /// The opening times for the collection point
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openingTimes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OpeningTimes> OpeningTimes { get; set; }

    }

    /// <summary>
    /// DeliveryOption
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryOption
    {
        /// <summary>
        /// Used to state the delivery option to be used. If empty all delivery options will be considered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// Dispatch date of the delivery order from the fulfillment location(warehouse or store) Date ISO 8601
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dispatchDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime DispatchDate { get; set; }

        /// <summary>
        /// Determines whether to do a reverse lead time calculation or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseCalculation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReverseCalculation { get; set; }

        /// <summary>
        /// Name of site/warehouse/client for internal identification at Centiro.
        /// <br/>A sender code is combined concept which equals the ship-from and will be different based on customer needs.
        /// <br/>The sender code is the key identifier which links the source system together with Centiro.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SenderCode { get; set; }

        /// <summary>
        /// Addresses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Address> Addresses { get; set; } = new System.Collections.ObjectModel.Collection<Address>();

        /// <summary>
        /// Vendor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vendor { get; set; }

    }

    /// <summary>
    /// The request sent to get available delivery service options.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryRequest
    {
        /// <summary>
        /// A unique id for this delivery. Used to match delivery in request and response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid DeliveryId { get; set; }

        /// <summary>
        /// DeliveryOptions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DeliveryOption> DeliveryOptions { get; set; } = new System.Collections.ObjectModel.Collection<DeliveryOption>();

        /// <summary>
        /// Products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Package> Packages { get; set; } = new System.Collections.ObjectModel.Collection<Package>();

        /// <summary>
        /// Attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attribute> Attributes { get; set; }

    }

    /// <summary>
    /// The response received from the delivery request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeliveryResponse
    {
        /// <summary>
        /// A unique id for this delivery. Used to match delivery in request and response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid DeliveryId { get; set; }

        /// <summary>
        /// AvailableDeliveryOptions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableDeliveryOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableDeliveryOption> AvailableDeliveryOptions { get; set; }

    }

    /// <summary>
    /// Dimension units
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DimensionUnitOfMeasure
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Mm")]
        Mm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cm")]
        Cm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"In")]
        In = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Ft")]
        Ft = 4,

    }

    /// <summary>
    /// Object containing geographic data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoPoint
    {
        /// <summary>
        /// The latitude (north-south position) of the GeoPoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude (east-west position) of the GeoPoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        /// <summary>
        /// The coordinate system that the GeoPoint is represented in
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geodeticDatum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeodeticDatum { get; set; }

    }

    /// <summary>
    /// Set if real calculated leadtime or default fallback
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LeadTimeCalculationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CALCULATED")]
        CALCULATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFAULT")]
        DEFAULT = 1,

    }

    /// <summary>
    /// Object containing times with opening and closing times
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenHours
    {
        /// <summary>
        /// Opening time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OpeningTime { get; set; }

        /// <summary>
        /// Closing time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("closingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClosingTime { get; set; }

    }

    /// <summary>
    /// Object containing all information about opening times
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpeningTimes
    {
        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeekDays Day { get; set; }

        /// <summary>
        /// The opening times for this specific day
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OpenHours> OpenHours { get; set; }

    }

    /// <summary>
    /// The information about the package.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Package
    {
        /// <summary>
        /// Package type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The currency of the unitValue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// The height of the product package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitHeight", Required = Newtonsoft.Json.Required.Always)]
        public double UnitHeight { get; set; }

        /// <summary>
        /// The length of the product including package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitLength", Required = Newtonsoft.Json.Required.Always)]
        public double UnitLength { get; set; }

        /// <summary>
        /// The width of the product including package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitWidth", Required = Newtonsoft.Json.Required.Always)]
        public double UnitWidth { get; set; }

        /// <summary>
        /// The volume of the product including package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnitVolume { get; set; }

        /// <summary>
        /// The weight of the product including package
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unitWeight", Required = Newtonsoft.Json.Required.Always)]
        public double UnitWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("unitWeightUnitOfMeasure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeightUnitOfMeasure UnitWeightUnitOfMeasure { get; set; }

        [Newtonsoft.Json.JsonProperty("unitDimensionUnitOfMeasure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DimensionUnitOfMeasure UnitDimensionUnitOfMeasure { get; set; }

        [Newtonsoft.Json.JsonProperty("unitVolumeUnitOfMeasure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VolumeUnitOfMeasure UnitVolumeUnitOfMeasure { get; set; }

        /// <summary>
        /// Attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attribute> Attributes { get; set; }

    }

    /// <summary>
    /// Volume units
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VolumeUnitOfMeasure
    {

        [System.Runtime.Serialization.EnumMember(Value = @"M3")]
        M3 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Cm3")]
        Cm3 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Mm3")]
        Mm3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"In3")]
        In3 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Ft3")]
        Ft3 = 4,

    }

    /// <summary>
    /// Weekdays
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeekDays
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Monday")]
        Monday = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tuesday")]
        Tuesday = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Wednesday")]
        Wednesday = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Thursday")]
        Thursday = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Friday")]
        Friday = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Saturday")]
        Saturday = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Sunday")]
        Sunday = 6,

    }

    /// <summary>
    /// Weight units
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeightUnitOfMeasure
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Kg")]
        Kg = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"G")]
        G = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Oz")]
        Oz = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Lbs")]
        Lbs = 3,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromiseEngineApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PromiseEngineApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PromiseEngineApiException<TResult> : PromiseEngineApiException
    {
        public TResult Result { get; private set; }

        public PromiseEngineApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603